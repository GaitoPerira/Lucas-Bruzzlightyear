name: Terraform AWS Academy Deploy with HTTPS Website

on:
  push:
    branches: [ main ]
    paths: 
      - 'src/**'

jobs:
  terraform-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.ASIA6GBMBFHS2SIQFHAV }}
        aws-secret-access-key: ${{secrets.M3K1ssHkzvcIuH761csHGp0KPYxFZhqRV/JY4t0/ }}
        aws-session-token: ${{ secrets.IQoJb3JpZ2luX2VjEG8aCXVzLXdlc3QtMiJHMEUCIG9lbjq78XRbEGdkoY/WjbtfabO7rlWjRhWC4McSXNyJAiEAmuL1C/lTzKh8aXFFBhVyLjurQbniZqseU7/ma49fhPEqtwII9///////////ARAAGgw5NzUwNDk5MjcxNDEiDMFWvZkPK9XDqCFEXSqLAjje6pq2dq0Ekc4OUMK9RCm5Cp+v0Cn9nXnvmN8HvOhm6vRnWf39pKceuWK50SA53iInE/Vi8hsFDy4b7KgItmob8zSxSKNekw4j41YvUXGAKHAz2v0OuiTXGtPTBGH3Q3joST/L+9gBkBk7HnyOX6Eq2aAvehpeELLVpqI2NOsSmnxLYxIsmt9TtVrt2Y5hvAtaKW6j4MgWPgnoqgVJWSXvdpXmA7OUwYoKFMQdpZ6iaSPuoswLYyR1dab8vyQvMdux/sZujRcNOeNuwjv+WipNkjnLxquUOO/Xfg4ocV0T1lR80CK4mXh7c2EuiUDOEsAYKf1+nkpSXGbzKNG0mYZv1Bs431o7hb3eVDD2rvHGBjqdAS7o9jKSakg9b6JZZhzSLLEy51bCJVpdKe4zvg8ZcxeerPJ5AcaJ0bbcw3vMLPcwK9V3XWnlidYGGipigPhFW0pswqtz5xmAi3azNMA3dZPN1FLqNjk+d8kmkDjDXOKavMzc/3CbyUBBeeKxPRc73ncOWgskyuSrUnT6h+47y5dEzyIt3qxx9S1F0mPlS4R/zyDHv6h94JSsygpP/kY=}}
        aws-region: us-east-1
        
    - name: Build Node.js Lambda Functions
      run: |
        # Build original lambdas
        cd src/lambda/nodejs
        npm install --production
        cd ../../../
        
        # Build static server lambda
        cd src/lambda/static-server
        npm install --production
        cd ../../../
        
    - name: Terraform Init
      working-directory: src/terraform
      run: terraform init
      
    - name: Terraform Validate
      working-directory: src/terraform
      run: terraform validate
      
    - name: Terraform Plan
      working-directory: src/terraform
      run: terraform plan -var-file=tfvars/development.tfvars -out=tfplan
      
    - name: Terraform Apply
      if: github.event_name == 'push'
      working-directory: src/terraform
      run: terraform apply -var-file=tfvars/development.tfvars -auto-approve

    - name: Sync Frontend to S3
      if: github.event_name == 'push'
      run: |
        BUCKET_NAME="homepage-padaria-online-frontend-development"
        aws s3 sync src/frontend/ s3://$BUCKET_NAME --delete
        echo "‚úÖ Frontend synced to bucket: $BUCKET_NAME"
        
    - name: Get Website URLs
      if: github.event_name == 'push'
      working-directory: src/terraform
      run: |
        echo "üåê Website URLs:"
        echo "HTTP:  $(terraform output -raw website_endpoint)"
        echo "HTTPS: $(terraform output -raw https_website_url)"
        echo ""
        echo "üîí Use a URL HTTPS para produ√ß√£o!"
        
    - name: Test HTTPS Endpoint
      if: github.event_name == 'push'
      working-directory: src/terraform
      run: |
        HTTPS_URL=$(terraform output -raw https_website_url)
        echo "üß™ Testando endpoint HTTPS: $HTTPS_URL"
        
        # Aguarda alguns segundos para o deploy completar
        sleep 10
        
        # Testa se o endpoint responde
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$HTTPS_URL" || echo "000")
        
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "‚úÖ Website HTTPS est√° funcionando! Status: $HTTP_STATUS"
        else
          echo "‚ö†Ô∏è Website pode estar ainda deployando. Status: $HTTP_STATUS"
          echo "Aguarde alguns minutos e teste manualmente."
        fi